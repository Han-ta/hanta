import{_ as s,o as a,c as n,O as t}from"./chunks/framework.3254de84.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"twenty-three.md","filePath":"twenty-three.md"}'),l={name:"twenty-three.md"},e=t(`<h2 id="第二十三课——包装类以及自动装箱和拆箱" tabindex="-1">第二十三课——包装类以及自动装箱和拆箱 <a class="header-anchor" href="#第二十三课——包装类以及自动装箱和拆箱" aria-label="Permalink to &quot;第二十三课——包装类以及自动装箱和拆箱&quot;">​</a></h2><p>包装类是Java中一组用于表示基本数据类型的类。Java中的每种基本数据类型都有对应的包装类。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Boolean类</td><td>对应boolean数据类型</td></tr><tr><td>​​Character​类</td><td>对应char数据类型</td></tr><tr><td>Byte​类</td><td>对应byte数据类型</td></tr><tr><td>​​Short类</td><td>对应short数据类型</td></tr><tr><td>​​Integer​类</td><td>对应int数据类型</td></tr><tr><td>​​Long​类</td><td>对应long数据类型</td></tr><tr><td>​​Float​类</td><td>对应float数据类型</td></tr><tr><td>Double​类</td><td>对应double数据类型</td></tr></tbody></table><p>包装类提供了一些与基本数据类型相关的方法，例如将字符串转换为基本数据类型、将基本数据类型转换为字符串、比较两个对象等。<br> 此外，包装类还提供了一些静态方法，例如将字符串转换为包装类对象、将基本类型转换为包装类对象等。<br> 包装类对象在进行比较时应该使用 ​equals()​ 方法而不是 ==​ 运算符。例如，下面的代码会输出 ​false​：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Integer</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Integer</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> num2</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出false。</span></span></code></pre></div><p>这是因为 == ​运算符比较的是对象的引用，而不是对象的属性值。而在上面的代码中，​num1​和 ​num2​虽然包含相同的值，但是它们是两个不同的对象，因此​ ==​ 运算符返回false​。<br> 如果要比较两个包装类对象的值是否相等，应该使用equals()​方法，例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出true。</span></span></code></pre></div><hr><hr><hr><p>自动装箱和拆箱是Java语言中的两个特性，用于简化基本数据类型和包装类之间的转换。<br> 自动装箱指的是将基本类型值自动转换为对应的包装类对象。<br> 例如，当我们将一个int​类型的变量赋值给一个Integer​类型的变量时，编译器会自动将int​类型的值装箱为一个​Integer​类型的对象。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自动装箱，相当于 Integer obj = Integer.valueOf(num);</span></span></code></pre></div><p>自动拆箱指的是将包装类对象自动转换为对应的基本数据类型值。<br> 例如，当我们将一个 ​Integer​类型的变量赋值给一个int​类型的变量时，编译器会自动将Integer​类型的对象拆箱为一个int​类型的值。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自动拆箱，相当于 int num = obj.intValue();</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结： <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结：&quot;">​</a></h3><p>①知道包装类。<br> ②知道自动装箱和拆箱。</p>`,16),o=[e];function p(r,c,y,D,i,C){return a(),n("div",null,o)}const F=s(l,[["render",p]]);export{A as __pageData,F as default};
