import{_ as a,o as s,c as n,O as e}from"./chunks/framework.3254de84.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"twenty-two.md","filePath":"twenty-two.md"}'),t={name:"twenty-two.md"},o=e(`<h2 id="第二十二课——嵌套类" tabindex="-1">第二十二课——嵌套类 <a class="header-anchor" href="#第二十二课——嵌套类" aria-label="Permalink to &quot;第二十二课——嵌套类&quot;">​</a></h2><p>Java语言允许你在一个类里定义另一个类，里面的类称为嵌套类，如下所示：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OuterClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NestedClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>嵌套类分为两类：静态和非静态。声明为static的嵌套类称为静态嵌套类。非静态嵌套类称为内部类。<br> 内部类可以访问外部类的其他成员（实例变量和方法等），即使它们被声明为私有。静态嵌套类无权访问外部类的其他成员。</p><h4 id="静态嵌套类" tabindex="-1">静态嵌套类： <a class="header-anchor" href="#静态嵌套类" aria-label="Permalink to &quot;静态嵌套类：&quot;">​</a></h4><p>与静态方法和变量一样，静态嵌套类与其外部类相关联。<br> 和静态方法一样，静态嵌套类不能直接引用其外部类中定义的实例变量或方法，它只能通过对象引用来使用它们。<br> 使用外部类的类名访问静态嵌套类：<br> 外部类名.内部类名<br> 例如，要为静态嵌套类创建对象，请使用以下语法：<br> 外部类名.内部类名 obj = new 外部类名.内部类名();</p><h4 id="内部类" tabindex="-1">内部类： <a class="header-anchor" href="#内部类" aria-label="Permalink to &quot;内部类：&quot;">​</a></h4><p>与实例方法和变量一样，内部类与其外部类的实例相关联，并且可以直接访问该对象的方法和字段。<br> 此外，由于内部类与实例相关联，因此无法定义任何静态成员本身。<br> 内部类的实例只能存在于外部类的实例中，并且可以直接访问其外部实例的方法和实例变量。<br> 要实例化内部类，必须首先实例化外部类。然后，使用以下语法在外部对象中创建内部对象：<br> 外部类名.内部类名 obj = 外部类对象引用.new 内部类名();<br> 有两种特殊的内部类：局部类和匿名类。</p><p><strong>局部类</strong>是指在一个方法内部定义的类，它只在该方法内部可见。<br> 局部类可以访问其外部类的成员变量和方法。<br> 局部类只能访问声明为final的局部变量。</p><p><strong>匿名类</strong>是指没有明确定义类名的类，通常用于创建一个临时的、只在某个方法或代码块内部使用的对象。<br> 匿名类可以访问其外部类的成员变量和方法，但是它不能访问该方法内的局部变量和参数，除非这些变量或参数被声明为final。<br> 另外，由于匿名类没有明确的类名，因此它不能被其他方法或代码块所使用。<br> 如果需要在多个方法或代码块中使用同一个类，就需要定义一个具名类。<br> 匿名类以后继续讲。</p><h3 id="小结" tabindex="-1">小结： <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结：&quot;">​</a></h3><p>①学会嵌套类。</p>`,12),l=[o];function r(p,c,i,d,b,h){return s(),n("div",null,l)}const y=a(t,[["render",r]]);export{C as __pageData,y as default};
